[
  {
    "type": "post",
    "url": "/auth",
    "title": "Login",
    "name": "login",
    "group": "Authentication",
    "version": "1.0.0",
    "description": "<p>This endpoint validates user credentials and provides a signed <code>Json Web Token.</code></p> <p>This token can be sent in <code>Authorization</code> header of future requests to gain access to protected resources such as user profile and appointments.</p> <p>The API uses the Bearer authentication scheme meaning headers of protected resources must include <code>Authorization: Bearer token</code></p>",
    "parameter": {
      "examples": [
        {
          "title": "Request body",
          "content": "{\n    \"email\": \"test@test.com\",\n    \"password\": \"qwer1234\",\n}",
          "type": "json"
        }
      ]
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n{\n    \"success\": true,\n    \"data\": {\n        \"jwt\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjViMTE3MDRhYzVlNDM2MDE2ODBkMzgxZCIsImlhdCI6MTUyNzk1ODUwMiwiZXhwIjoxNTI3OTYyMTAyfQ.V9ch6KWmJ8f65qEeD7qPeSUm2z1mjPRm-HsO0WQq-eNCR1fBz_ej4UgVCYfJJ_yXDeq0Wmytwy1TYZcBNdn-LA\"\n    }\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "400",
            "description": "<p>Bad request. Email and password must be specified</p>"
          },
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "401",
            "description": "<p>Unauthorized. Incorrect credentials</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/auth-controller.js",
    "groupTitle": "Authentication"
  },
  {
    "type": "post",
    "url": "/recipes",
    "title": "Add Recipe",
    "name": "add_recipe",
    "group": "Recipes",
    "version": "1.0.0",
    "description": "<p>This request creates a new recipe using the json body provided. An id field is generated automatically. For consistency the json should include the parameters specified below. A return Json prividing the generated id is returned This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "parameter": {
      "fields": {
        "Recipe Fields": [
          {
            "group": "Recipe Fields",
            "type": "String",
            "optional": false,
            "field": "title",
            "description": "<p>Name of the recipe.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "String",
            "optional": false,
            "field": "image",
            "description": "<p>URL of the recipe.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "number",
            "optional": false,
            "field": "time",
            "description": "<p>Preparation time represented in number of minutes.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "number",
            "optional": false,
            "field": "servings",
            "description": "<p>Number of serving produced with the recipe.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "String",
            "optional": false,
            "field": "link",
            "description": "<p>Optional URL link to the website where the recipe was found.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "Object[]",
            "optional": false,
            "field": "ingredients",
            "description": "<p>List of ingredients needed for the recipe.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "String",
            "optional": false,
            "field": "ingredient.name",
            "description": "<p>Name of the ingredient.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "Quantity",
            "optional": false,
            "field": "ingredient.quantity",
            "description": "<p>Number representing the quantity of the ingredient.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "String",
            "optional": false,
            "field": "ingredient.unit",
            "description": "<p>Measurement such as grams, cups, teaspoons, etc.</p>"
          },
          {
            "group": "Recipe Fields",
            "type": "String[]",
            "optional": false,
            "field": "directions",
            "description": "<p>List of steps describing how to cook the recipe.</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Post Example:",
          "content": "{\n   \"title\": \"Tomato Soup\",\n   \"image\": \"https://s3.eu-central-1.amazonaws.com/delish-app-uploads/recipes/573ec098e85f5601f611322b.jpg\",\n   \"time\": 35,\n   \"servings\": 6,\n   \"link\": \"https://www.allrecipes.com/recipe/39544/garden-fresh-tomato-soup/\",\n   \"ingredients\":\n   [\n       {\n           \"name\": \"Tomato\",\n           \"quantity\": 4,\n           \"unit\": \"cups\"\n       },\n       {\n           \"name\": \"Onion\",\n           \"quantity\": 1,\n           \"unit\": \"whole\"\n       },\n       {\n           \"name\": \"Clove\",\n           \"quantity\": 4,\n           \"unit\": \"whole\"\n       },\n       {\n           \"name\": \"Butter\",\n           \"quantity\": 2,\n           \"unit\": \"tablespoons\"\n       },\n       {\n           \"name\": \"Chicken Broth\",\n           \"quantity\": 2,\n           \"unit\": \"cups\"\n       },\n       {\n           \"name\": \"Salt\",\n           \"quantity\": 1,\n           \"unit\": \"tablespoon\"\n       }\n   ],\n   \"instructions\":\n   [\n       \"In a stockpot, over medium heat, combine the tomatoes, onion, cloves and chicken broth. Bring to a boil, and gently boil for about 20 minutes to blend all of the flavors. Remove from heat and run the mixture through a food mill into a large bowl, or pan. Discard any stuff left over in the food mill.\",\n       \"In the now empty stockpot, melt the butter over medium heat. Stir in the flour to make a roux, cooking until the roux is a medium brown. Gradually whisk in a bit of the tomato mixture, so that no lumps form, then stir in the rest. Season with sugar and salt, and adjust to taste.\"\n   ]\n}",
          "type": "json"
        }
      ]
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "201",
            "description": "<p>Recipe Created</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 201 Created\n{\n   \"data\":\n   {\n      \"id\" : \"5746d36bfa2cdf7c300bf61c\"\n   }\n   \"message\": \"Recipe added\"\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "400",
            "description": "<p>Bad Request <br>Wrongly formated <code>json</code> was sent.</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/recipes-controller.js",
    "groupTitle": "Recipes"
  },
  {
    "type": "delete",
    "url": "/recipes/:id",
    "title": "Delete Recipe",
    "name": "delete_recipe",
    "group": "Recipes",
    "version": "1.0.0",
    "description": "<p>This request deletes an existing recipe with the <code>:id</code> parameter specified in the request URL. This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "parameter": {
      "fields": {
        "Parameter": [
          {
            "group": "Parameter",
            "type": "ObjectId",
            "optional": false,
            "field": "id",
            "description": "<p>The unique identifier of the recipe.</p>"
          }
        ]
      }
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>Successful Request</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>Recipe not found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal server error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/recipes-controller.js",
    "groupTitle": "Recipes"
  },
  {
    "type": "get",
    "url": "/recipes",
    "title": "Get All Recipes",
    "name": "get_all_recipes",
    "group": "Recipes",
    "version": "1.0.0",
    "description": "<p>This request returns a list of all recipes. This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/recipes-controller.js",
    "groupTitle": "Recipes"
  },
  {
    "type": "get",
    "url": "/recipes/:id",
    "title": "Get Recipe",
    "name": "get_recipe",
    "group": "Recipes",
    "version": "1.0.0",
    "description": "<p>This request returns the recipe specified by the unique <code>:id</code> in the request URL This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "parameter": {
      "fields": {
        "Parameter": [
          {
            "group": "Parameter",
            "type": "ObjectId",
            "optional": false,
            "field": "id",
            "description": "<p>The unique identifier of the recipe.</p>"
          }
        ]
      }
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>Recipe Not Found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/recipes-controller.js",
    "groupTitle": "Recipes"
  },
  {
    "type": "patch",
    "url": "/recipes/:id",
    "title": "Update Recipe",
    "name": "update_recipe",
    "group": "Recipes",
    "version": "1.0.0",
    "description": "<p>This request updates an existing recipe using the json body provided and the <code>:id</code> parameter specified in the request URL. For consistency the json may include keys like in the example below. This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "parameter": {
      "fields": {
        "Parameter": [
          {
            "group": "Parameter",
            "type": "ObjectId",
            "optional": false,
            "field": "id",
            "description": "<p>The unique identifier of the recipe.</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Edit Example:",
          "content": "{\n   \"title\": \"Cherry Tomato Soup\",\n   \"image\": \"https://s3.eu-central-1.amazonaws.com/delish-app-uploads/cherry-tomato.jpg\"\n}",
          "type": "json"
        }
      ]
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>Recipe not found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal server error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/recipes-controller.js",
    "groupTitle": "Recipes"
  },
  {
    "type": "put",
    "url": "/users",
    "title": "Delete User",
    "name": "delete_user",
    "group": "Users",
    "version": "1.0.0",
    "description": "<p>An authorized user can delete their own user account. This request retrieves the user id from the authorization header and deletes the corresponding user.</p> <p>This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "204",
            "description": "<p>User was successfully deleted</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "401",
            "description": "<p>Unauthorized</p>"
          },
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>User was not found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/users-controller.js",
    "groupTitle": "Users"
  },
  {
    "type": "get",
    "url": "/users",
    "title": "Get User",
    "name": "get_user",
    "group": "Users",
    "version": "1.0.0",
    "description": "<p>An authorized user can view their own user information. This request retrieves the user id from the authorization header and returns the corresponding user data.</p> <p>This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n{\n    \"success\": true,\n    \"data\": {\n        \"name\": \"Cristiana Madnddn\",\n        \"email\": \"test@test.com\"\n    }\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "401",
            "description": "<p>Unauthorized</p>"
          },
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>User was not found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/users-controller.js",
    "groupTitle": "Users"
  },
  {
    "type": "post",
    "url": "/users",
    "title": "Register User",
    "name": "register_user",
    "group": "Users",
    "version": "1.0.0",
    "description": "<p>This request creates a new user on the patient platform. By default the new user is assigned the patient role and all it's corresponding privileges.</p>",
    "parameter": {
      "fields": {
        "Parameter": [
          {
            "group": "Parameter",
            "type": "String",
            "optional": false,
            "field": "email",
            "description": "<p>Unique Email used for logging into the account</p>"
          },
          {
            "group": "Parameter",
            "type": "String",
            "optional": false,
            "field": "password",
            "description": "<p>Password used for logging into the account</p>"
          },
          {
            "group": "Parameter",
            "type": "String",
            "optional": false,
            "field": "name",
            "description": "<p>Full name of the user</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Request body",
          "content": "{\n    \"email\": \"test@test.com\",\n    \"password\": \"qwer1234\",\n    \"name\": \"Test 4\"\n}",
          "type": "json"
        }
      ]
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>User was successfully created</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n{\n  \"success\": true\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "409",
            "description": "<p>Conflict</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      },
      "examples": [
        {
          "title": "(Error 4xx) 409 Conflict",
          "content": "{\n    \"success\": false,\n    \"error\": \"Conflict registering new user. User email, phone and national Id must be unique\"\n}",
          "type": "json"
        }
      ]
    },
    "filename": "src/routes/users-controller.js",
    "groupTitle": "Users"
  },
  {
    "type": "post",
    "url": "/users",
    "title": "Update User Profile",
    "name": "update_user",
    "group": "Users",
    "version": "1.0.0",
    "description": "<p>An authorized user can modify their own user profile. This request retrieves the user id from the authorization header and modifies the corresponding user data.</p> <p>This resource is protected. Therefore, you must include <code>Authorization: Bearer token</code> header.</p>",
    "header": {
      "fields": {
        "Authorization Header": [
          {
            "group": "Authorization Header",
            "type": "String",
            "allowedValues": [
              "\"Bearer :token\""
            ],
            "optional": false,
            "field": "Authorization",
            "description": "<p>Replace <code>:token</code> with supplied Auth Token</p>"
          }
        ]
      }
    },
    "parameter": {
      "examples": [
        {
          "title": "Update account",
          "content": "{\n    \"email\": \"test@test.com\",\n    \"password\": \"qwer1234\",\n}",
          "type": "json"
        },
        {
          "title": "Update profile",
          "content": "{\n    \"name\": \"Test 4\"\n}",
          "type": "json"
        }
      ]
    },
    "success": {
      "fields": {
        "Success 2xx": [
          {
            "group": "Success 2xx",
            "optional": false,
            "field": "200",
            "description": "<p>User was successfully updated</p>"
          }
        ]
      }
    },
    "error": {
      "fields": {
        "Error 4xx": [
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "401",
            "description": "<p>Unauthorized</p>"
          },
          {
            "group": "Error 4xx",
            "optional": false,
            "field": "404",
            "description": "<p>User was not found</p>"
          }
        ],
        "Error 5xx": [
          {
            "group": "Error 5xx",
            "optional": false,
            "field": "500",
            "description": "<p>Internal Server Error</p>"
          }
        ]
      }
    },
    "filename": "src/routes/users-controller.js",
    "groupTitle": "Users"
  }
]
